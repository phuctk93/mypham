<!DOCTYPE html>
<html>
    <head>
        <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />

        <title>Babylon.js sample code</title>

        <!-- Babylon.js -->
        <script src="https://code.jquery.com/pep/0.4.2/pep.min.js"></script>
        <script src="https://cdnjs.cloudflare.com/ajax/libs/dat-gui/0.6.2/dat.gui.min.js"></script>
        <script src="https://preview.babylonjs.com/cannon.js"></script>
        <script src="https://preview.babylonjs.com/Oimo.js"></script>
        <script src="https://preview.babylonjs.com/earcut.min.js"></script>
        <script src="https://preview.babylonjs.com/babylon.js"></script>
        <script src="https://preview.babylonjs.com/inspector/babylon.inspector.bundle.js"></script>
        <script src="https://preview.babylonjs.com/materialsLibrary/babylonjs.materials.min.js"></script>
        <script src="https://preview.babylonjs.com/proceduralTexturesLibrary/babylonjs.proceduralTextures.min.js"></script>
        <script src="https://preview.babylonjs.com/postProcessesLibrary/babylonjs.postProcess.min.js"></script>
        <script src="https://preview.babylonjs.com/loaders/babylonjs.loaders.js"></script>
        <script src="https://preview.babylonjs.com/serializers/babylonjs.serializers.min.js"></script>
        <script src="https://preview.babylonjs.com/gui/babylon.gui.min.js"></script>

        <style>
            html, body {
                overflow: hidden;
                width: 100%;
                height: 100%;
                margin: 0;
                padding: 0;
            }

            #renderCanvas {
                width: 100%;
                height: 100%;
                touch-action: none;
            }
        </style>
    </head>
<body>
    <canvas id="renderCanvas"></canvas>
    <script>
        var canvas = document.getElementById("renderCanvas");
        var engine = new BABYLON.Engine(canvas, true);

        var createScene = function () {
            var scene = new BABYLON.Scene(engine);
            var camera = new BABYLON.ArcRotateCamera("Camera", 0, 0.8, 5, BABYLON.Vector3.Zero(), scene);
            camera.attachControl(canvas, true);
            camera.wheelDeltaPercentage = 0.01;
            camera.pinchDeltaPercentage = 0.001;
            
            // Environment Texture
            var hdrTexture = BABYLON.CubeTexture.CreateFromPrefilteredData("textures/environment.dds", scene);
			var nhan = new BABYLON.Texture("textures/nhan.png", scene);
        
            scene.imageProcessingConfiguration.exposure = 0.6;
            scene.imageProcessingConfiguration.contrast = 1.6;
			scene.ambientColor = new BABYLON.Color3(1, 1, 1);
			
			var light = new BABYLON.HemisphericLight("hemiLight", new BABYLON.Vector3(-1, 1, 0), scene);
			light.diffuse = new BABYLON.Color3(1, 1, 1);
			light.specular = new BABYLON.Color3(1, 1, 1);
			light.groundColor = new BABYLON.Color3(1, 1, 1);
        
            // Skybox
            var hdrSkybox = BABYLON.Mesh.CreateBox("hdrSkyBox", 1000.0, scene);
            var hdrSkyboxMaterial = new BABYLON.PBRMaterial("skyBox", scene);
            hdrSkyboxMaterial.backFaceCulling = false;
            hdrSkyboxMaterial.reflectionTexture = hdrTexture.clone();
            hdrSkyboxMaterial.reflectionTexture.coordinatesMode = BABYLON.Texture.SKYBOX_MODE;
        	hdrSkyboxMaterial.microSurface = 1.0;
            hdrSkyboxMaterial.disableLighting = true;
            hdrSkybox.material = hdrSkyboxMaterial;
            hdrSkybox.infiniteDistance = true;
        
        
            var woodPlank = BABYLON.MeshBuilder.CreateBox("plane", { width: 5, height: 1, depth: 5 }, scene);
			woodPlank.position = new BABYLON.Vector3(0,-1,0);
            // Create materials
            var glass = new BABYLON.PBRMaterial("glass", scene);
            glass.reflectionTexture = hdrTexture;
            glass.refractionTexture = hdrTexture;
            //glass.linkRefractionWithTransparency = true;
            glass.indexOfRefraction = 1;
            glass.alpha = 0.2;
            glass.microSurface = 1;
            glass.reflectivityColor = new BABYLON.Color3(0.2, 0.2, 0.2);
            glass.albedoColor = new BABYLON.Color3(0.85, 0.85, 0.85);
        
            var metal = new BABYLON.PBRMaterial("metal", scene);
            metal.reflectionTexture = hdrTexture;
            metal.microSurface = 0.5;
            metal.reflectivityColor = new BABYLON.Color3(0.85, 0.85, 0.85);
            metal.albedoColor = new BABYLON.Color3(0.01, 0.01, 0.01);
        	
        	var plastic = new BABYLON.PBRMaterial("plastic", scene);
			plastic.albedoTexture = nhan;
			plastic.useAlphaFromAlbedoTexture = true;
            plastic.reflectionTexture = hdrTexture;
            plastic.microSurface = 1;
        	//plastic.albedoColor = new BABYLON.Color3(0, 0, 0);
        	plastic.reflectivityColor = new BABYLON.Color3(1, 1, 1);
			//plastic.reflectivityTexture = nhan;
			//plastic.useMicroSurfaceFromReflectivityMapAlpha = true;
			
			var mat = new BABYLON.StandardMaterial("mat", scene);
			mat.diffuseTexture = nhan;
			mat.diffuseTexture.hasAlpha = true;
			mat.diffuseTexture.getAlphaFromRGB = true;
			mat.backFaceCulling = false;
			mat.diffuseColor = BABYLON.Color3.White();

            var sand = new BABYLON.StandardMaterial("sand", scene);
			sand.diffuseTexture = new BABYLON.Texture("textures/sand.png", scene);
            sand.bumpTexture = new BABYLON.Texture("textures/sand_normal.png", scene);
            sand.diffuseColor = BABYLON.Color3.White();
            sand.specularColor = new BABYLON.Color3(0.1, 0.1, 0.1);
        
            var wood = new BABYLON.PBRMaterial("wood", scene);
            wood.reflectionTexture = hdrTexture;
            wood.environmentIntensity = 1;
            wood.specularIntensity = 0.3;
        
            wood.reflectivityTexture = new BABYLON.Texture("textures/reflectivity.png", scene);
            wood.useMicroSurfaceFromReflectivityMapAlpha = true;
        
            wood.albedoColor = BABYLON.Color3.White();
            wood.albedoTexture = new BABYLON.Texture("textures/albedo.png", scene);
            woodPlank.material = wood;

            BABYLON.SceneLoader.ImportMesh("sand", "textures/", "sand.babylon", scene, function (newMeshes) {
				newMeshes[0].material = sand;
			});
			
			BABYLON.SceneLoader.ImportMesh("body", "textures/", "body.babylon", scene, function (newMeshes) {
				newMeshes[0].material = glass;
			});
			
			BABYLON.SceneLoader.ImportMesh("nap", "textures/", "nap.babylon", scene, function (newMeshes) {
				newMeshes[0].material = metal;
			});
			
			var nhanFront, nhanBack;
			var nhanMat = [mat, plastic];
			var nhanIndex = 0;
			
			BABYLON.SceneLoader.ImportMesh("nhan", "textures/", "nhan.babylon", scene, function (newMeshes) {
				nhanFront = newMeshes[0];
				nhanFront.material = mat;
			});
			
			BABYLON.SceneLoader.ImportMesh("nhan_back", "textures/", "nhan_back.babylon", scene, function (newMeshes) {
				nhanBack = newMeshes[0];
				nhanBack.material = mat;
			});
			
			var advancedTexture = BABYLON.GUI.AdvancedDynamicTexture.CreateFullscreenUI("ui1");
			
			var button1 = BABYLON.GUI.Button.CreateSimpleButton("but1", "Click to change label style");
			button1.width = 0.2;
			button1.height = "40px";
			button1.color = "#333";
			button1.cornerRadius = 20;
			button1.background = "#fff";
			button1.verticalAlignment = BABYLON.GUI.Control.VERTICAL_ALIGNMENT_BOTTOM;
			button1.bottom = "10%"
			button1.onPointerUpObservable.add(function() {
				if(nhanIndex < 1){
					nhanIndex++
				}else{
					nhanIndex = 0;
				}
				nhanFront.material = nhanMat[nhanIndex];
				nhanBack.material = nhanMat[nhanIndex];
			});
        	advancedTexture.addControl(button1);
            return scene;
        };
        
        var scene = createScene()

        engine.runRenderLoop(function () {
            if (scene) {
                scene.render();
            }
        });

        // Resize
        window.addEventListener("resize", function () {
            engine.resize();
        });
    </script>
</body>
</html>
